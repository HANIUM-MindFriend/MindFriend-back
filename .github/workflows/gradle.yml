name: Java CI with Gradle

# main 브랜치의 push와 pull로 CI가 작동
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '19'
        distribution: 'temurin'

    - uses : actions/checkout@v3

    - name: Set YML
      run: |
        mkdir -p src/main/resources
        echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml
        find src

    # gradlew에 권한 부여
    - name : Grant execute permission for gradlew
      run : chmod +x grdlew

    # gradlew 빌드
    - name: Build with Gradle
      run : ./gradlew clean build

    # 빌드 성공하면 해당 프로젝트를 zip로 만듦
    # 이름은 run에서 설정 
    - name : Make zip file
      run : zip -r ./mindFriend.zip .
      shell : bash

    # AWS 계정 설정
    - name : Configure AWS credentials
      uses : aws-actions/configure-aws-credentials@v1
      with :
        aws-access-key-id : ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # 만들어 놓은 S3에 해당 zip파일 저장
    - name : Upload to S3
      run : aws s3 cp --region ${{ secrets.AWS_REGION }} ./mindFriend.zip s3://ai-deploy-bucket/mindFriend.zip

    # AWS CodeDeploy 배포
    - name : Deploy
      env :
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run : | 
        aws deploy create-deployment \
        --application-name springboot-api \
        --deployment-group-name dev \
        --file-exists-behavior OVERWRITE \
        --s3-location bucket=ai-deploy-bucket,bundleType=zip,key=mindFriend.zip \
        --region ${{ secrets.AWS_REGION }}

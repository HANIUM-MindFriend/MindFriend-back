name: BackEnd - CI/CD

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Gradle 캐싱
      uses: actions/cache@v3
      with:
        path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
                ${{ runner.os }}-gradle-
    - name: Make application.yml
      run: |
        cd ./src/main
        
        mkdir resources
        cd ./resources
        
        touch ./application.yml
        touch ./application-aws.yml
        touch ./application-oauth.yml
        touch ./application-app.yml
        
        echo "$APPLICATION_OAUTH" > ./application-oauth.yml
        echo "$APPLICATION_APP" > ./application-app.yml
        echo "$APPLICATION" > ./application.yml
        echo "$APPLICATION_AWS" > ./application-aws.yml
        
        env:
        APPLICATION_OAUTH: ${{ secrets.APPLICATION_OAUTH }}
        APPLICATION_APP: ${{ secrets.APPLICATION_APP }}
        APPLICATION: ${{ secrets.APPLICATION }}
        APPLICATION_AWS: ${{ secrets.APPLICATION_AWS }}
      shell: bash

    - name: Gradle 권한 부여
      run: chmod +x gradlew

    - name: Gradle로 빌드 실행
      run: ./gradlew bootjar
    
    - name: zip file 생성
      run: |
        mkdir deploy
        cp ./docker/docker-compose.blue.yml ./deploy/
        cp ./docker/docker-compose.green.yml ./deploy/
        cp ./appspec.yml ./deploy/
        cp ./docker/Dockerfile ./deploy/
        cp ./scripts/*.sh ./deploy/
        cp ./build/libs/*.jar ./deploy/
        zip -r -qq -j ./spring-build.zip ./deploy
        
    # AWS에 연결해줍니다.
    - name: AWS 연결
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    # S3에 프로젝트를 업로드 합니다.
    - name: S3에 프로젝트 업로드
      run: |
        aws s3 cp \
        --region ap-northeast-2 \
        ./spring-build.zip s3://aidiary-backend-app-bucket
# CodeDelploy에 배포를 요청합니다.
    - name: Code Deploy 배포 요청
      run: aws deploy create-deployment --application-name backend-deploy-group
        --deployment-config-name CodeDeployDefault.OneAtATime
        --deployment-group-name backend-deploy-group
        --s3-location bucket=backend-rex-bucket,bundleType=zip,key=spring-build.zip
    if: always()
